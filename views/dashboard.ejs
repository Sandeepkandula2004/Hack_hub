<!DOCTYPE html>
<html>

<head>
  <!-- Basic -->
  <meta charset="utf-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <!-- Mobile Metas -->
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
  <!-- Site Metas -->
  <meta name="keywords" content="" />
  <meta name="description" content="" />
  <meta name="author" content="" />
  <link rel="shortcut icon" href="images/favicon.png" type="">
  <link rel="stylesheet" href="/stylesheets/dashboard.css">

  <title> AEROLOG </title>

  <!-- bootstrap core css -->
  <link rel="stylesheet" type="text/css" href="/stylesheets/bootstrap.css" />

  <!-- fonts style -->
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700;900&display=swap" rel="stylesheet">

  <!--owl slider stylesheet -->
  <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/assets/owl.carousel.min.css" />

  <!-- font awesome style -->
  <link href="/stylesheets/font-awesome.min.css" rel="stylesheet" />

  <!-- Custom styles for this template -->
  <link href="/stylesheets/style.css" rel="stylesheet" />
  <!-- responsive style -->
  <link href="/stylesheets/responsive.css" rel="stylesheet" />
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
 

</head>

<body class="sub_page">

  <div class="hero_area">

    <div class="hero_bg_box">
      <div class="bg_img_box">
        <img src="images/hero-bg.png" alt="">
      </div>
    </div>

    <!-- header section strats -->
    <header class="header_section">
      <div class="container-fluid">
        <nav class="navbar navbar-expand-lg custom_nav-container ">
          <a class="navbar-brand" href="/">
            <span>
              Aerolog
            </span>
          </a>

          <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class=""> </span>
          </button>

          <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav  ">
              <li class="nav-item ">
                <a class="nav-link" href="/">Home </a>
              </li>
              <li class="nav-item">
                <a class="nav-link" href="/about"> About</a>
              </li>
              <li class="nav-item">
                <a class="nav-link" href="/service">Services</a>
              </li>
              <li li class="nav-item">
                <a class="nav-link" href="/dashboard">dashboard <span class="sr-only">(current)</span></a>
            </li>
              </li>
              
              <li class="nav-item active">
                <a class="nav-link" href="/why">Why Us  </a>
              </li>
              <li class="nav-item">
                <a class="nav-link" href="/tickket">Ticket</a>
              </li>
              <li class="nav-item">
                <a class="nav-link" href="/team">Team</a>
              </li>
              <li class="nav-item">
                <a class="nav-link" href="#"> <i class="fa fa-user" aria-hidden="true"></i> Login</a>
              </li>
              <form class="form-inline">
                <button class="btn  my-2 my-sm-0 nav_search-btn" type="submit">
                  <i class="fa fa-search" aria-hidden="true"></i>
                </button>
              </form>
            </ul>
          </div>
        </nav>
      </div>
    </header>
    <!-- end header section -->
  </div>



<!-- dashboard section-->

<div class="dashboard-container">
    <!-- First Row -->
    <div class="info-boxes">
      <div class="info-box">
        <h3>Total Complaints</h3>
        <p id="total-complaints">0</p>
      </div>
      <div class="info-box">
        <h3>Complaints Solved</h3>
        <p id="solved-complaints">0</p>
      </div>
      <div class="info-box">
        <h3>Pending Complaints</h3>
        <p id="pending-complaints">0</p>
      </div>
    </div>
  
    <!-- Second Row -->
    <div class="info-boxes">
      <div class="info-box chart-box">
        <canvas id="solvedPercentageChart"></canvas>
      </div>
      <div class="info-box">
        <h3>Current Time</h3>
        <p id="current-time">--:--:--</p>
      </div>
      <div class="info-box">
        <h3>Temperature</h3>
        <p id="temperature">--¬∞C</p>
        <div id="temp-icon">üå°Ô∏è</div>
      </div>
    </div>
  
    <!-- Third Row -->
 <div class="card">
      <h3>Complaints by Urgency</h3>
      <div class="chart-container">
        <canvas id="urgencyChart"></canvas>
      </div>
    </div>
    
    
    <div class="card">
      <h3>Issue Types Distribution</h3>
      <div class="chart-container">
        <canvas id="issuePieChart"></canvas>
      </div>
    
    </div>
    
    <div class="card">
      <h3>Complaints by Location</h3>
      <div class="chart-container">
        <canvas id="locationBarChart"></canvas>
      </div>
    </div>  
  

  </div>
  
  
   <script>
    const complaintsData = <%- JSON.stringify(complaints) %>;// From server-side

    // Total Complaints
    const totalComplaints = complaintsData.length;

    // Solved Complaints
    const solvedComplaints = complaintsData.filter(
      (complaint) => complaint.status === "Completed"
    ).length;

    // Pending Complaints
    const pendingComplaints = totalComplaints - solvedComplaints;

    // Update Info Boxes
    document.getElementById("total-complaints").textContent = totalComplaints;
    document.getElementById("solved-complaints").textContent = solvedComplaints;
    document.getElementById("pending-complaints").textContent = Math.max(
      pendingComplaints,
      0
    );

    // Solved Percentage Chart
    const solvedPercentage = totalComplaints > 0 
      ? Math.round((solvedComplaints / totalComplaints) * 100) 
      : 0;

    const solvedPercentageCtx = document
      .getElementById("solvedPercentageChart")
      .getContext("2d");

    new Chart(solvedPercentageCtx, {
      type: "doughnut",
      data: {
        labels: ["Completed", "Pending"],
        datasets: [
          {
            data: [solvedComplaints, Math.max(pendingComplaints, 0)],
            backgroundColor: ["#4caf50", "#f44336"],
          },
        ],
      },
      options: {
        plugins: {
          legend: {
            display: true,
          },
        },
        cutout: "70%",
      },
    });

    // Complaints by Urgency
    const urgencyCounts = complaintsData.reduce((acc, complaint) => {
      acc[complaint.urgency] = (acc[complaint.urgency] || 0) + 1;
      return acc;
    }, {});

    new Chart(document.getElementById("urgencyChart"), {
      type: "doughnut",
      data: {
        labels: Object.keys(urgencyCounts),
        datasets: [
          {
            data: Object.values(urgencyCounts),
            backgroundColor: ["#ff6384", "#36a2eb", "#ffcd56"],
          },
        ],
      },
    });

    // Issue Types Distribution
    const issueCounts = complaintsData.reduce((acc, complaint) => {
      acc[complaint.issuetype] = (acc[complaint.issuetype] || 0) + 1;
      return acc;
    }, {});

    new Chart(document.getElementById("issuePieChart"), {
      type: "pie",
      data: {
        labels: Object.keys(issueCounts),
        datasets: [
          {
            data: Object.values(issueCounts),
            backgroundColor: ["#4caf50", "#2196f3", "#ffc107", "#f44336"],
          },
        ],
      },
    });

    // Complaints by Location
    const locationCounts = complaintsData.reduce((acc, complaint) => {
      acc[complaint.location] = (acc[complaint.location] || 0) + 1;
      return acc;
    }, {});

    new Chart(document.getElementById("locationBarChart"), {
      type: "bar",
      data: {
        labels: Object.keys(locationCounts),
        datasets: [
          {
            label: "Complaints",
            data: Object.values(locationCounts),
            backgroundColor: "#3f51b5",
          },
        ],
      },
      options: {
        scales: {
          y: {
            beginAtZero: true,
          },
        },
      },
    });

    // Function to update the current time
function updateTime() {
    const now = new Date();
    const timeString = now.toLocaleTimeString();
    document.getElementById('current-time').textContent = timeString;
  }
  setInterval(updateTime, 1000); // Update time every second
  
  // Set a static temperature for now (can integrate API later)
  document.getElementById('temperature').textContent = "25¬∞C"; // Example temperature
  
</script>



<!-- dashboard section done-->


 <!-- Filter Section-->
<!-- <div class="container">
<div class="filter-container">
  <form id="filter-form">
    <label for="urgency">Urgency:</label>
    <select name="urgency" id="urgency">
      <option value="">--Select--</option>
      <option value="Critical">Critical</option>
      <option value="High">High</option>
      <option value="Medium">Medium</option>
      <option value="Low">Low</option>
    </select>

    <label for="location">Location:</label>
    <select name="location" id="location">
      <option value="">--Select--</option>
      <option value="Baggage Claim">Baggage Claim</option>
      <option value="Check-in and Boarding Area">Check-in and Boarding Area</option>
      <option value="Security Checkpoint">Security Checkpoint</option>
      <option value="Terminal Facilities">Terminal Facilities</option>
      <option value="Gate Area">Gate Area</option>
    </select>

    <label for="issuetype">Issue Type:</label>
    <select name="issuetype" id="issuetype">
      <option value="">--Select--</option>
      <option value="Baggage handling">Baggage handling</option>
      <option value="Check-in and boarding">Check-in and boarding</option>
      <option value="Security">Security</option>
      <option value="Terminal facilities">Terminal facilities</option>
      <option value="Flight delays and cancellations">Flight delays and cancellations</option>
      <option value="Customer service">Customer service</option>
      <option value="Refunds">Refunds</option>
      <option value="General information">General information</option>
    </select>

    <label for="sentiment">Sentiment:</label>
    <select name="sentiment" id="sentiment">
      <option value="">--Select--</option>
      <option value="Angry">Angry</option>
      <option value="Frustrated">Frustrated</option>
      <option value="Neutral">Neutral</option>
      <option value="Satisfied">Satisfied</option>
    </select>

    <button type="submit">Apply Filters</button>
  </form>
</div>




<script>
  document.getElementById("filter-form").addEventListener("submit", function (e) {
    e.preventDefault();

    // Get the filter values from the form
    const urgency = document.getElementById("urgency").value;
    const location = document.getElementById("location").value;
    const issuetype = document.getElementById("issuetype").value;
    const sentiment = document.getElementById("sentiment").value;
    const suggestions = document.getElementById("suggestions").value;

    // Send an AJAX request to the server
    fetch("/filterComplaints", {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        urgency,
        location,
        issuetype,
        sentiment,
        suggestions
      })
    })
    .then(response => response.json())
    .then(data => {
      // Update the complaints table with the filtered data
      const tableBody = document.getElementById("complaints-table-body");
      tableBody.innerHTML = ""; // Clear existing rows

      data.complaints.forEach(complaint => {
        const row = document.createElement("tr");
        row.setAttribute("data-id", complaint.i_id);
        row.innerHTML = `
          <td>${complaint.issue}</td>
          <td>${complaint.urgency}</td>
          <td>${complaint.location}</td>
          <td>${complaint.issuetype}</td>
          <td>${complaint.sentiment}</td>
          <td>${complaint.suggestions}</td>
          <td>${complaint.pnr_number}</td>
          <td>${complaint.status}</td>
          <td>
            <button class="delete-btn" onclick="handleDelete('${complaint.i_id}')" ${complaint.status === 'Completed' ? 'disabled' : ''}>
              Mark as Completed
            </button>
          </td>
        `;
        tableBody.appendChild(row);
      });
    })
    .catch(error => console.error('Error:', error));
  });
</script> 
  <div class="table-container">
    <table class="complaints-table">
      <thead>
        <tr>
          <th>Issue</th>
          <th>Urgency</th>
          <th>Location</th>
          <th>Type</th>
          <th>Sentiment</th>
          <th>Suggestions</th>
          <th>PNR</th>
          <th>Status</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody>
        <% complaints.forEach(complaint => { %>
            <tr data-id="<%= complaint.i_id %>">
              <td><%= complaint.issue %></td>
              <td><%= complaint.urgency %></td>
              <td><%= complaint.location %></td>
              <td><%= complaint.issuetype %></td>
              <td><%= complaint.sentiment %></td>
              <td><%= complaint.suggestions %></td>
              <td><%= complaint.pnr_number %></td>
              <td><%= complaint.status %></td>
              <td>
                <button 
                  class="delete-btn" 
                  onclick="handleDelete('<%= complaint.i_id %>')"
                  <%= complaint.status === 'Completed' ? 'disabled' : '' %>
                >
                  Mark as Completed
                </button>
              </td>
            </tr>
            <script>console.log("Complaint ID:", "<%= complaint.i_id %>");</script>
          <% }); %>
      </tbody>
    </table>
  </div>
</div> 


   
  <style>
    .table-container {
      overflow-x: auto;
    }
    
    .complaints-table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 1rem;
    }
    
    .complaints-table th,
    .complaints-table td {
      padding: 12px;
      text-align: left;
      border-bottom: 1px solid #ddd;
    }
    
    .complaints-table th {
      background-color: #f5f5f5;
    }
    
    .delete-btn {
      background-color: #4CAF50;
      color: white;
      border: none;
      padding: 8px 16px;
      border-radius: 4px;
      cursor: pointer;
      transition: background-color 0.3s;
    }
    
    .delete-btn:hover {
      background-color: #45a049;
    }
    
    .delete-btn:disabled {
      background-color: #cccccc;
      cursor: not-allowed;
    }
</style>
  
  <script>
    async function handleDelete(complaintId) {
    console.log("Deleting Complaint ID:", complaintId); // Debugging step

    if (!complaintId || complaintId === "undefined") {
        alert("Error: Invalid complaint ID");
        return;
    }

    try {
        const response = await fetch(`/complaints/${complaintId}`, {
            method: 'PUT',
        });

        if (response.ok) {
            window.location.reload(); // Refresh to show updated status
        } else {
            alert('Failed to update complaint status');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('An error occurred while xupdating the complaint');
    }
}


</script> -->
<div class="container">
  <!-- Filter Form -->
  <div class="filter-container">
    <form id="filter-form">
      <label for="urgency">Urgency:</label>
      <select name="urgency" id="urgency">
        <option value="">--Select--</option>
        <option value="Critical">Critical</option>
        <option value="High">High</option>
        <option value="Medium">Medium</option>
        <option value="Low">Low</option>
      </select>

      <label for="location">Location:</label>
      <select name="location" id="location">
        <option value="">--Select--</option>
        <option value="Baggage Claim">Baggage Claim</option>
        <option value="Check-in and Boarding Area">Check-in and Boarding Area</option>
        <option value="Security Checkpoint">Security Checkpoint</option>
        <option value="Terminal Facilities">Terminal Facilities</option>
        <option value="Gate Area">Gate Area</option>
      </select>

      <label for="issuetype">Issue Type:</label>
      <select name="issuetype" id="issuetype">
        <option value="">--Select--</option>
        <option value="Baggage handling">Baggage handling</option>
        <option value="Check-in and boarding">Check-in and boarding</option>
        <option value="Security">Security</option>
        <option value="Terminal facilities">Terminal facilities</option>
        <option value="Flight delays and cancellations">Flight delays and cancellations</option>
        <option value="Customer service">Customer service</option>
        <option value="Refunds">Refunds</option>
        <option value="General information">General information</option>
      </select>

      <label for="sentiment">Sentiment:</label>
      <select name="sentiment" id="sentiment">
        <option value="">--Select--</option>
        <option value="Angry">Angry</option>
        <option value="Frustrated">Frustrated</option>
        <option value="Neutral">Neutral</option>
        <option value="Satisfied">Satisfied</option>
      </select>

      <button type="submit">Apply Filters</button>
    </form>
  </div>

  <!-- Complaints Table -->
  <div class="table-container">
    <table class="complaints-table">
      <thead>
        <tr>
          <th>Issue</th>
          <th>Urgency</th>
          <th>Location</th>
          <th>Type</th>
          <th>Sentiment</th>
          <th>Suggestions</th>
          <th>PNR</th>
          <th>Status</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody id="complaints-table-body">
        <% complaints.forEach(complaint => { %>
          <tr data-id="<%= complaint.i_id %>">
            <td><%= complaint.issue %></td>
            <td><%= complaint.urgency %></td>
            <td><%= complaint.location %></td>
            <td><%= complaint.issuetype %></td>
            <td><%= complaint.sentiment %></td>
            <td><%= complaint.suggestions %></td>
            <td><%= complaint.pnr_number %></td>
            <td><%= complaint.status %></td>
            <td>
              <button 
                class="delete-btn" 
                onclick="handleDelete('<%= complaint.i_id %>')"
                <%= complaint.status === 'Completed' ? 'disabled' : '' %>
              >
                Mark as Completed
              </button>
            </td>
          </tr>
        <% }); %>
      </tbody>
    </table>
  </div>
</div>

<!-- Filter Form Script -->
<script>
  document.getElementById("filter-form").addEventListener("submit", function (e) {
    e.preventDefault(); // Prevent form submission

    // Get selected filter values
    const urgency = document.getElementById("urgency").value;
    const location = document.getElementById("location").value;
    const issuetype = document.getElementById("issuetype").value;
    const sentiment = document.getElementById("sentiment").value;

    // Send filter data to the server
    fetch(`/filterComplaints?urgency=${urgency}&location=${location}&issuetype=${issuetype}&sentiment=${sentiment}`, {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
      }
    })
    .then(response => response.json())
    .then(data => {
      const tableBody = document.getElementById("complaints-table-body");
      tableBody.innerHTML = ""; // Clear existing rows

      // Add filtered complaints to the table
      data.complaints.forEach(complaint => {
        const row = document.createElement("tr");
        row.setAttribute("data-id", complaint.i_id);
        row.innerHTML = `
          <td>${complaint.issue}</td>
          <td>${complaint.urgency}</td>
          <td>${complaint.location}</td>
          <td>${complaint.issuetype}</td>
          <td>${complaint.sentiment}</td>
          <td>${complaint.suggestions}</td>
          <td>${complaint.pnr_number}</td>
          <td>${complaint.status}</td>
          <td>
            <button class="delete-btn" onclick="handleDelete('${complaint.i_id}')" ${complaint.status === 'Completed' ? 'disabled' : ''}>
              Mark as Completed
            </button>
          </td>
        `;
        tableBody.appendChild(row);
      });
    })
    .catch(error => console.error('Error:', error));
  });
//   function handleDelete(complaintId) {
//   // Send an AJAX request to mark the complaint as completed
//   fetch(`/complaints/${complaintId}`, {
//     method: "POST",
//     headers: {
//       "Content-Type": "application/json",
//     }
//   })
//   .then(response => response.json())
//   .then(data => {
//     // On success, update the table to reflect the changes
//     if (data.message === 'Complaint marked as completed') {
//       const row = document.querySelector(`tr[data-id="${complaintId}"]`);
//       if (row) {
//         row.querySelector('.delete-btn').disabled = true;
//         row.querySelector('.delete-btn').innerText = 'Completed';
//       }
//     }
//   })
//   .catch(error => {
//     console.error('Error:', error);
//     alert('There was an error marking the complaint as completed');
//   });
// }

function handleDelete(complaintId) {
  fetch(`/markCompleted/${complaintId}`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    }
  })
  .then(response => response.json())
  .then(data => {
    if (data.message === 'Complaint marked as completed') {
      const row = document.querySelector(`tr[data-id="${complaintId}"]`);
      if (row) {
        row.querySelector('.delete-btn').disabled = true;
        row.querySelector('.delete-btn').innerText = 'Completed';
      }
    } else {
      // Handle different messages from the server
      alert(`Error: ${data.message}`);
    }
  })
  .catch(error => {
    console.error('Error:', error);
    alert(`There was an error marking the complaint as completed. Error: ${error.message}`);
  });
}


</script>

<!-- CSS Styling -->
<style>
  .table-container {
    overflow-x: auto;
  }
  
  .complaints-table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 1rem;
  }
  
  .complaints-table th,
  .complaints-table td {
    padding: 12px;
    text-align: left;
    border-bottom: 1px solid #ddd;
  }
  
  .complaints-table th {
    background-color: #f5f5f5;
  }
  
  .delete-btn {
    background-color: #4CAF50;
    color: white;
    border: none;
    padding: 8px 16px;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s;
  }
  
  .delete-btn:hover {
    background-color: #45a049;
  }
  
  .delete-btn:disabled {
    background-color: #cccccc;
    cursor: not-allowed;
  }
</style>









<!-- info section -->
  <section class="info_section layout_padding2">
    <div class="container">
      <div class="row">
        <div class="col-md-6 col-lg-3 info_col">
          <div class="info_contact">
            <h4>
              Address
            </h4>
            <div class="contact_link_box">
              <a href="">
                <i class="fa fa-map-marker" aria-hidden="true"></i>
                <span>
                  Location
                </span>
              </a>
              <a href="">
                <i class="fa fa-phone" aria-hidden="true"></i>
                <span>
                  Call +01 1234567890
                </span>
              </a>
              <a href="">
                <i class="fa fa-envelope" aria-hidden="true"></i>
                <span>
                  demo@gmail.com
                </span>
              </a>
            </div>
          </div>
          <div class="info_social">
            <a href="">
              <i class="fa fa-facebook" aria-hidden="true"></i>
            </a>
            <a href="">
              <i class="fa fa-twitter" aria-hidden="true"></i>
            </a>
            <a href="">
              <i class="fa fa-linkedin" aria-hidden="true"></i>
            </a>
            <a href="">
              <i class="fa fa-instagram" aria-hidden="true"></i>
            </a>
          </div>
        </div>
        <div class="col-md-6 col-lg-3 info_col">
          <div class="info_detail">
            <h4>
              Info
            </h4>
            <p>
              At APOC, we leverage cutting-edge AI to streamline airport operations. Our automatic call logging system ensures that every complaint is accurately transcribed, categorized, and addressed in real-time. With a dynamic dashboard for live monitoring, we empower teams to respond faster and improve passenger experience. From complaint tracking to data-driven insights, our solution enhances efficiency and keeps operations running smoothly.
            </p>
          </div>
        </div>
        <div class="col-md-6 col-lg-2 mx-auto info_col">
          <div class="info_link_box">
            <h4>
              Links
            </h4>
            <div class="info_links">
              <a class="active" href="/">
                Home
              </a>
              <a class="" href="/about">
                About
              </a>
              <a class="" href="/service">
                Services
              </a>
              <a class="" href="/dashboard">
                Dashboard
              </a>
              <a class="" href="/why">
                Why Us
              </a>
              <a class="" href="/team">
                Team
              </a>
            </div>
          </div>
        </div>
        <div class="col-md-6 col-lg-3 info_col ">
          <h4>
            Subscribe
          </h4>
          <form action="#">
            <input type="text" placeholder="Enter email" />
            <button type="submit">
              Subscribe
            </button>
          </form>
        </div>
      </div>
    </div>
  </section>

  <!-- end info section -->

  <!-- footer section -->
  <section class="footer_section">
    <div class="container">
      <p>
        &copy; <span id="displayYear"></span> All Rights Reserved By
        <a href="https://html.design/">Free Html Templates</a>
      </p>
    </div>
  </section>
  <!-- footer section -->

  <!-- jQery -->
  <script type="text/javascript" src="/javascripts/jquery-3.4.1.min.js"></script>
  <!-- popper js -->
  <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous">
  </script>
  <!-- bootstrap js -->
  <script type="text/javascript" src="/javascripts/bootstrap.js"></script>
  <!-- owl slider -->
  <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js">
  </script>
  <!-- custom js -->
  <script type="text/javascript" src="/javascripts/custom.js"></script>
  <!-- Google Map -->
  <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCh39n5U-4IoWpsVGUHWdqB6puEkhRLdmI&callback=myMap">
  </script>
  <!-- End Google Map -->

</body>

</html>